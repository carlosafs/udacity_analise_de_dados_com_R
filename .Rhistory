length(unique(yo$price))
table(yo)
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada +
plain + mixed.berry)
summary(yo$all.purchases)
ggplot(aes(x = all.purchases), data = yo) +
geom_histogram(fill = "blue")
ggplot(aes(x = all.purchases), data = yo, binwidth = 1) +
geom_histogram(fill = "blue")
ggplot(aes(x = all.purchases), data = yo, binwidth = 1) +
geom_histogram(fill = "blue")
ggplot(aes(x = price, y = time), data = yo) +
geom_point()
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = "orange")
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
sample.ids
ggplot(aes(x = time, y = price),
data = subset(yo, id%in% sample.ids)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id%in% sample.ids)) +
facet_wrap( ~id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
getwd()
read.delim('pseudo_facebook.tsv')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
library(ggplot2)
library(dplyr)
library(gridExtra)
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
head(pf.fc_by_age_gender)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = "median_friend_count")
head(pf.fc_by_age_gender.wide)
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined,
c(2004, 2009, 2011, 2012, 2014))
with(subset(pf, tenure >=1), summary(friend_count / tenure))
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
install.packages('GGally')
library("GGally")
set.seed(1836)
getwd()
library(ggplot2)
data(diamonds)
names(diamonds)
View(diamonds)
ggplot(aes(x = price), data = pf) +
geom_point(alpha = 1/20) +
xlim(13, 90)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(color = cut)) +
facet_wrap( ~color)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~color)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~color) +
scale_x_log10()
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(fill = cut))
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point() +
scale_color_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_wrap( ~color) +
log(price)
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut), log(price)) +
facet_wrap( ~color)
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point() +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(fill = cut)) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(color = cut))
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'qual')
summary(diamonds$price, diamonds$cut)
summary(diamonds)
by(diamonds$price, diamonds$cut, summary)
# saber os valores de table pelo corte
by(diamonds$price, diamonds$table, summary)
by(diamonds$cut, diamonds$table, summary)
# saber os valores de table pelo corte
by(diamonds$table, diamonds$cut, summary)
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'qual') +
scale_x_continuous(limits = c(50, 80), breaks = seq(50, 80, 2))
diamonds$volume <- (diamonds$x * diamonds$y * diamonds$z)
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = cut)) +
scale_color_brewer(type = 'div') +
scale_y_log10()
names(diamonds)
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity)) +
scale_color_brewer(type = 'div') +
scale_y_log10()
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.01) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10")
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.01) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10") +
scale_x_continuous(limits = c(0, 400), breaks = seq(0, 400, 100))
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.99) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10") +
scale_x_continuous(limits = c(0, 400), breaks = seq(0, 400, 100))
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.99) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10") +
scale_x_continuous(limits = c(0, 400), breaks = seq(0, 400, 100)) +
scale_y_continuous(limits = c(0, 12000))
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.99) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10") +
scale_x_continuous(limits = c(0, 400), breaks = seq(0, 400, 100)) +
scale_y_continuous(limits = c(0, 12000))
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point(aes(color = clarity), alpha = 0.99) +
scale_color_brewer(type = 'div') +
coord_trans(y = "log10") +
scale_x_continuous(limits = c(0, 400), breaks = seq(0, 400, 100))
read.delim('pseudo_facebook.tsv')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
names(pf)
pf$prop_initiated <- (pf$friendships_initiated / pf$friend_count)
View(pf)
library(dplyr)
library(gridExtra)
pf$year_joined <- floor(2014 - pf$tenure/365)
pf$year_joined.bucket <- cut(pf$year_joined,
c(2004, 2009, 2011, 2012, 2014))
ggplot(aes(x = prop_initiated, y = tenure),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(aes(x = prop_initiated, y = tenure),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.x = median)
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_smooth(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_smooth(aes(color = year_joined.bucket))
ggplot(aes(x = tenure, y = prop_initiated),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean)
by(pf$prop_initiated, pf$year_joined.bucket, summary)
ggplot(aes(x = cut, y = price/carat/), data = diamonds) +
geom_point(aes(color = color)) +
facet_wrap(~clarity)
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_point(aes(color = color)) +
facet_wrap(~clarity)
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_point(aes(color = color)) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_jitter(aes(color = color)) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_point(aes(color = color)) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_jitter(aes(color = color), alpha = 0.2) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_jitter(aes(color = color), alpha = 0.9) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_jitter(aes(color = color), alpha = 0.8) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
ggplot(aes(x = cut, y = price/carat), data = diamonds) +
geom_jitter(aes(color = color), alpha = 0.5) +
facet_wrap(~clarity) +
scale_color_brewer(type = 'div')
getwd()
library(ggplot2)
data(diamonds)
names(diamonds)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.99)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.5)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.5) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.01) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.99) +
scale_color_brewer(type = 'div')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 0.99) +
stat_smooth(method = "lm")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 1/4) +
stat_smooth(method = "lm") +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, o.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, o.99)))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(color = "orange", alpha = 1/4) +
stat_smooth(method = "lm") +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
library(DBI)
detach("package:DBI", unload = TRUE)
install.packages("memisc")
install.packages("memisc")
getwd()
library(ggplot2)
data(diamonds)
data(diamonds)
names(diamonds)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(mass)
library(car)
library(reshape2)
library(dplyr)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I("."), outlier.shape = c(".")))
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = c('.')))
help("wrap")
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
getwd()
library(ggplot2)
data(diamonds)
names(diamonds)
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberrot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
library(scales)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans , limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans, limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans, limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans, limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(mass)
library(car)
library(reshape2)
library(dplyr)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans, limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2)))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans, limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3))
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = cut()), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "clarity", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
ggplot(aes(x = carat, y = price, colour = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = "jitter") +
scale_color_brewer(type = "div",
guide = guide_legend(title = "color", reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle("Price (log10) vs\nCube Root of Carat and Clarity")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity = "VS1")
modelEstimate = predict (m5, newdata = thisDiamond,
interval = "prediction", level = .95)
View(diamonds)
thisDiamond = data.frame(carat = 1.00, cut = "Good",
color = "I", clarity = "VS1")
modelEstimate = predict (m5, newdata = thisDiamond,
interval = "prediction", level = .95)
exp(modelEstimate)
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
MeuDiamante = data.frame(carat = 0.23, cut = "Very Good",
color = "H", clarity = "VS1")
exp(modelEstimate)
modelEstimate2 = predict (m5, newdata = MeuDiamante,
interval = "prediction", level = .95)
exp(modelEstimate2)
